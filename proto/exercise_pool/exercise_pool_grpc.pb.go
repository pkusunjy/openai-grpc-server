// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: exercise_pool/exercise_pool.proto

package exercise_pool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExercisePoolService_Get_FullMethodName               = "/exercise_pool.ExercisePoolService/get"
	ExercisePoolService_Set_FullMethodName               = "/exercise_pool.ExercisePoolService/set"
	ExercisePoolService_DelByTitle_FullMethodName        = "/exercise_pool.ExercisePoolService/del_by_title"
	ExercisePoolService_DelByContentIndex_FullMethodName = "/exercise_pool.ExercisePoolService/del_by_content_index"
)

// ExercisePoolServiceClient is the client API for ExercisePoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExercisePoolServiceClient interface {
	Get(ctx context.Context, in *ExercisePoolRequest, opts ...grpc.CallOption) (*ExercisePoolResponse, error)
	Set(ctx context.Context, in *ExercisePoolRequest, opts ...grpc.CallOption) (*ExercisePoolResponse, error)
	DelByTitle(ctx context.Context, in *ExercisePoolRequest, opts ...grpc.CallOption) (*ExercisePoolResponse, error)
	DelByContentIndex(ctx context.Context, in *ExercisePoolRequest, opts ...grpc.CallOption) (*ExercisePoolResponse, error)
}

type exercisePoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExercisePoolServiceClient(cc grpc.ClientConnInterface) ExercisePoolServiceClient {
	return &exercisePoolServiceClient{cc}
}

func (c *exercisePoolServiceClient) Get(ctx context.Context, in *ExercisePoolRequest, opts ...grpc.CallOption) (*ExercisePoolResponse, error) {
	out := new(ExercisePoolResponse)
	err := c.cc.Invoke(ctx, ExercisePoolService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exercisePoolServiceClient) Set(ctx context.Context, in *ExercisePoolRequest, opts ...grpc.CallOption) (*ExercisePoolResponse, error) {
	out := new(ExercisePoolResponse)
	err := c.cc.Invoke(ctx, ExercisePoolService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exercisePoolServiceClient) DelByTitle(ctx context.Context, in *ExercisePoolRequest, opts ...grpc.CallOption) (*ExercisePoolResponse, error) {
	out := new(ExercisePoolResponse)
	err := c.cc.Invoke(ctx, ExercisePoolService_DelByTitle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exercisePoolServiceClient) DelByContentIndex(ctx context.Context, in *ExercisePoolRequest, opts ...grpc.CallOption) (*ExercisePoolResponse, error) {
	out := new(ExercisePoolResponse)
	err := c.cc.Invoke(ctx, ExercisePoolService_DelByContentIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExercisePoolServiceServer is the server API for ExercisePoolService service.
// All implementations must embed UnimplementedExercisePoolServiceServer
// for forward compatibility
type ExercisePoolServiceServer interface {
	Get(context.Context, *ExercisePoolRequest) (*ExercisePoolResponse, error)
	Set(context.Context, *ExercisePoolRequest) (*ExercisePoolResponse, error)
	DelByTitle(context.Context, *ExercisePoolRequest) (*ExercisePoolResponse, error)
	DelByContentIndex(context.Context, *ExercisePoolRequest) (*ExercisePoolResponse, error)
	mustEmbedUnimplementedExercisePoolServiceServer()
}

// UnimplementedExercisePoolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExercisePoolServiceServer struct {
}

func (UnimplementedExercisePoolServiceServer) Get(context.Context, *ExercisePoolRequest) (*ExercisePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedExercisePoolServiceServer) Set(context.Context, *ExercisePoolRequest) (*ExercisePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedExercisePoolServiceServer) DelByTitle(context.Context, *ExercisePoolRequest) (*ExercisePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelByTitle not implemented")
}
func (UnimplementedExercisePoolServiceServer) DelByContentIndex(context.Context, *ExercisePoolRequest) (*ExercisePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelByContentIndex not implemented")
}
func (UnimplementedExercisePoolServiceServer) mustEmbedUnimplementedExercisePoolServiceServer() {}

// UnsafeExercisePoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExercisePoolServiceServer will
// result in compilation errors.
type UnsafeExercisePoolServiceServer interface {
	mustEmbedUnimplementedExercisePoolServiceServer()
}

func RegisterExercisePoolServiceServer(s grpc.ServiceRegistrar, srv ExercisePoolServiceServer) {
	s.RegisterService(&ExercisePoolService_ServiceDesc, srv)
}

func _ExercisePoolService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExercisePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExercisePoolServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExercisePoolService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExercisePoolServiceServer).Get(ctx, req.(*ExercisePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExercisePoolService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExercisePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExercisePoolServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExercisePoolService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExercisePoolServiceServer).Set(ctx, req.(*ExercisePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExercisePoolService_DelByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExercisePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExercisePoolServiceServer).DelByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExercisePoolService_DelByTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExercisePoolServiceServer).DelByTitle(ctx, req.(*ExercisePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExercisePoolService_DelByContentIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExercisePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExercisePoolServiceServer).DelByContentIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExercisePoolService_DelByContentIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExercisePoolServiceServer).DelByContentIndex(ctx, req.(*ExercisePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExercisePoolService_ServiceDesc is the grpc.ServiceDesc for ExercisePoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExercisePoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exercise_pool.ExercisePoolService",
	HandlerType: (*ExercisePoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _ExercisePoolService_Get_Handler,
		},
		{
			MethodName: "set",
			Handler:    _ExercisePoolService_Set_Handler,
		},
		{
			MethodName: "del_by_title",
			Handler:    _ExercisePoolService_DelByTitle_Handler,
		},
		{
			MethodName: "del_by_content_index",
			Handler:    _ExercisePoolService_DelByContentIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exercise_pool/exercise_pool.proto",
}
