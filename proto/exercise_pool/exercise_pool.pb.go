// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.0
// source: exercise_pool/exercise_pool.proto

package exercise_pool

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Scene int32

const (
	Scene_ILLEGAL                 Scene = 0
	Scene_IELTS_SPEAKING_P1       Scene = 1
	Scene_IELTS_SPEAKING_P2       Scene = 2
	Scene_IELTS_SPEAKING_P3       Scene = 3
	Scene_IELTS_WRITING_T1        Scene = 4 // 不带题库，占位
	Scene_IELTS_WRITING_T2        Scene = 5
	Scene_IELTS_SPEAKING_WORDS    Scene = 6  // 不带题库，占位
	Scene_IELTS_WRITING_WORDS     Scene = 7  // 不带题库，占位
	Scene_TOEFL_WRITING_P1        Scene = 8  // 不带题库，占位
	Scene_TOEFL_WRITING_P2        Scene = 9  // 不带题库，占位
	Scene_TOEFL_WRITING_P3        Scene = 10 // 不带题库，占位
	Scene_TRANSLATE_CN_TO_EN      Scene = 11 // 不带题库，占位
	Scene_TRANSLATE_EN_TO_CN      Scene = 12 // 不带题库，占位
	Scene_IELTS_SPEAKING_EXERCISE Scene = 13
	Scene_IELTS_SPEAKING_EXAM     Scene = 14
)

// Enum value maps for Scene.
var (
	Scene_name = map[int32]string{
		0:  "ILLEGAL",
		1:  "IELTS_SPEAKING_P1",
		2:  "IELTS_SPEAKING_P2",
		3:  "IELTS_SPEAKING_P3",
		4:  "IELTS_WRITING_T1",
		5:  "IELTS_WRITING_T2",
		6:  "IELTS_SPEAKING_WORDS",
		7:  "IELTS_WRITING_WORDS",
		8:  "TOEFL_WRITING_P1",
		9:  "TOEFL_WRITING_P2",
		10: "TOEFL_WRITING_P3",
		11: "TRANSLATE_CN_TO_EN",
		12: "TRANSLATE_EN_TO_CN",
		13: "IELTS_SPEAKING_EXERCISE",
		14: "IELTS_SPEAKING_EXAM",
	}
	Scene_value = map[string]int32{
		"ILLEGAL":                 0,
		"IELTS_SPEAKING_P1":       1,
		"IELTS_SPEAKING_P2":       2,
		"IELTS_SPEAKING_P3":       3,
		"IELTS_WRITING_T1":        4,
		"IELTS_WRITING_T2":        5,
		"IELTS_SPEAKING_WORDS":    6,
		"IELTS_WRITING_WORDS":     7,
		"TOEFL_WRITING_P1":        8,
		"TOEFL_WRITING_P2":        9,
		"TOEFL_WRITING_P3":        10,
		"TRANSLATE_CN_TO_EN":      11,
		"TRANSLATE_EN_TO_CN":      12,
		"IELTS_SPEAKING_EXERCISE": 13,
		"IELTS_SPEAKING_EXAM":     14,
	}
)

func (x Scene) Enum() *Scene {
	p := new(Scene)
	*p = x
	return p
}

func (x Scene) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scene) Descriptor() protoreflect.EnumDescriptor {
	return file_exercise_pool_exercise_pool_proto_enumTypes[0].Descriptor()
}

func (Scene) Type() protoreflect.EnumType {
	return &file_exercise_pool_exercise_pool_proto_enumTypes[0]
}

func (x Scene) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scene.Descriptor instead.
func (Scene) EnumDescriptor() ([]byte, []int) {
	return file_exercise_pool_exercise_pool_proto_rawDescGZIP(), []int{0}
}

type ExerciseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content      []string `protobuf:"bytes,2,rep,name=content,proto3" json:"content,omitempty"`
	Author       string   `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	CreateTime   uint64   `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime   uint64   `protobuf:"varint,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	ContentIndex []uint32 `protobuf:"varint,6,rep,packed,name=content_index,json=contentIndex,proto3" json:"content_index,omitempty"`
}

func (x *ExerciseItem) Reset() {
	*x = ExerciseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exercise_pool_exercise_pool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExerciseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExerciseItem) ProtoMessage() {}

func (x *ExerciseItem) ProtoReflect() protoreflect.Message {
	mi := &file_exercise_pool_exercise_pool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExerciseItem.ProtoReflect.Descriptor instead.
func (*ExerciseItem) Descriptor() ([]byte, []int) {
	return file_exercise_pool_exercise_pool_proto_rawDescGZIP(), []int{0}
}

func (x *ExerciseItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ExerciseItem) GetContent() []string {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ExerciseItem) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ExerciseItem) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ExerciseItem) GetExpireTime() uint64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *ExerciseItem) GetContentIndex() []uint32 {
	if x != nil {
		return x.ContentIndex
	}
	return nil
}

type ExercisePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scene Scene           `protobuf:"varint,1,opt,name=scene,proto3,enum=exercise_pool.Scene" json:"scene,omitempty"`
	Count uint32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Items []*ExerciseItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ExercisePoolRequest) Reset() {
	*x = ExercisePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exercise_pool_exercise_pool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExercisePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExercisePoolRequest) ProtoMessage() {}

func (x *ExercisePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exercise_pool_exercise_pool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExercisePoolRequest.ProtoReflect.Descriptor instead.
func (*ExercisePoolRequest) Descriptor() ([]byte, []int) {
	return file_exercise_pool_exercise_pool_proto_rawDescGZIP(), []int{1}
}

func (x *ExercisePoolRequest) GetScene() Scene {
	if x != nil {
		return x.Scene
	}
	return Scene_ILLEGAL
}

func (x *ExercisePoolRequest) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ExercisePoolRequest) GetItems() []*ExerciseItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ExercisePoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrNo  uint32          `protobuf:"varint,1,opt,name=err_no,json=errNo,proto3" json:"err_no,omitempty"`
	ErrMsg string          `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	Items  []*ExerciseItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ExercisePoolResponse) Reset() {
	*x = ExercisePoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exercise_pool_exercise_pool_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExercisePoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExercisePoolResponse) ProtoMessage() {}

func (x *ExercisePoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exercise_pool_exercise_pool_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExercisePoolResponse.ProtoReflect.Descriptor instead.
func (*ExercisePoolResponse) Descriptor() ([]byte, []int) {
	return file_exercise_pool_exercise_pool_proto_rawDescGZIP(), []int{2}
}

func (x *ExercisePoolResponse) GetErrNo() uint32 {
	if x != nil {
		return x.ErrNo
	}
	return 0
}

func (x *ExercisePoolResponse) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *ExercisePoolResponse) GetItems() []*ExerciseItem {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_exercise_pool_exercise_pool_proto protoreflect.FileDescriptor

var file_exercise_pool_exercise_pool_proto_rawDesc = []byte{
	0x0a, 0x21, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f,
	0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x22, 0xbd, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x8a, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52,
	0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x79, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x72, 0x72, 0x4e, 0x6f, 0x12, 0x17,
	0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2a, 0xe0, 0x02, 0x0a, 0x05, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x45, 0x4c, 0x54, 0x53, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x50, 0x31, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x45, 0x4c, 0x54,
	0x53, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x32, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x49, 0x45, 0x4c, 0x54, 0x53, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x45, 0x4c, 0x54, 0x53, 0x5f,
	0x57, 0x52, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x31, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x49, 0x45, 0x4c, 0x54, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x32,
	0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x45, 0x4c, 0x54, 0x53, 0x5f, 0x53, 0x50, 0x45, 0x41,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x53, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13,
	0x49, 0x45, 0x4c, 0x54, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x4f,
	0x52, 0x44, 0x53, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x4f, 0x45, 0x46, 0x4c, 0x5f, 0x57,
	0x52, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x31, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x4f, 0x45, 0x46, 0x4c, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x32, 0x10,
	0x09, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x4f, 0x45, 0x46, 0x4c, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x50, 0x33, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x4c, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x4e, 0x10, 0x0b, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x5f,
	0x54, 0x4f, 0x5f, 0x43, 0x4e, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x45, 0x4c, 0x54, 0x53,
	0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x58, 0x45, 0x52, 0x43, 0x49,
	0x53, 0x45, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x45, 0x4c, 0x54, 0x53, 0x5f, 0x53, 0x50,
	0x45, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x58, 0x41, 0x4d, 0x10, 0x0e, 0x32, 0xf7, 0x02,
	0x0a, 0x13, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x65,
	0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x12, 0x22,
	0x2e, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45,
	0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x64, 0x65, 0x6c,
	0x5f, 0x62, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x65, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x5f, 0x62, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x2e, 0x65,
	0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6b, 0x75, 0x73, 0x75, 0x6e, 0x6a, 0x79, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x69, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_exercise_pool_exercise_pool_proto_rawDescOnce sync.Once
	file_exercise_pool_exercise_pool_proto_rawDescData = file_exercise_pool_exercise_pool_proto_rawDesc
)

func file_exercise_pool_exercise_pool_proto_rawDescGZIP() []byte {
	file_exercise_pool_exercise_pool_proto_rawDescOnce.Do(func() {
		file_exercise_pool_exercise_pool_proto_rawDescData = protoimpl.X.CompressGZIP(file_exercise_pool_exercise_pool_proto_rawDescData)
	})
	return file_exercise_pool_exercise_pool_proto_rawDescData
}

var file_exercise_pool_exercise_pool_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_exercise_pool_exercise_pool_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_exercise_pool_exercise_pool_proto_goTypes = []interface{}{
	(Scene)(0),                   // 0: exercise_pool.Scene
	(*ExerciseItem)(nil),         // 1: exercise_pool.ExerciseItem
	(*ExercisePoolRequest)(nil),  // 2: exercise_pool.ExercisePoolRequest
	(*ExercisePoolResponse)(nil), // 3: exercise_pool.ExercisePoolResponse
}
var file_exercise_pool_exercise_pool_proto_depIdxs = []int32{
	0, // 0: exercise_pool.ExercisePoolRequest.scene:type_name -> exercise_pool.Scene
	1, // 1: exercise_pool.ExercisePoolRequest.items:type_name -> exercise_pool.ExerciseItem
	1, // 2: exercise_pool.ExercisePoolResponse.items:type_name -> exercise_pool.ExerciseItem
	2, // 3: exercise_pool.ExercisePoolService.get:input_type -> exercise_pool.ExercisePoolRequest
	2, // 4: exercise_pool.ExercisePoolService.set:input_type -> exercise_pool.ExercisePoolRequest
	2, // 5: exercise_pool.ExercisePoolService.del_by_title:input_type -> exercise_pool.ExercisePoolRequest
	2, // 6: exercise_pool.ExercisePoolService.del_by_content_index:input_type -> exercise_pool.ExercisePoolRequest
	3, // 7: exercise_pool.ExercisePoolService.get:output_type -> exercise_pool.ExercisePoolResponse
	3, // 8: exercise_pool.ExercisePoolService.set:output_type -> exercise_pool.ExercisePoolResponse
	3, // 9: exercise_pool.ExercisePoolService.del_by_title:output_type -> exercise_pool.ExercisePoolResponse
	3, // 10: exercise_pool.ExercisePoolService.del_by_content_index:output_type -> exercise_pool.ExercisePoolResponse
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_exercise_pool_exercise_pool_proto_init() }
func file_exercise_pool_exercise_pool_proto_init() {
	if File_exercise_pool_exercise_pool_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_exercise_pool_exercise_pool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExerciseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exercise_pool_exercise_pool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExercisePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exercise_pool_exercise_pool_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExercisePoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_exercise_pool_exercise_pool_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_exercise_pool_exercise_pool_proto_goTypes,
		DependencyIndexes: file_exercise_pool_exercise_pool_proto_depIdxs,
		EnumInfos:         file_exercise_pool_exercise_pool_proto_enumTypes,
		MessageInfos:      file_exercise_pool_exercise_pool_proto_msgTypes,
	}.Build()
	File_exercise_pool_exercise_pool_proto = out.File
	file_exercise_pool_exercise_pool_proto_rawDesc = nil
	file_exercise_pool_exercise_pool_proto_goTypes = nil
	file_exercise_pool_exercise_pool_proto_depIdxs = nil
}
